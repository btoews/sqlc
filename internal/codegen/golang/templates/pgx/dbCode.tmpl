{{define "dbCodeTemplatePgx"}}

type DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
{{- if .UsesCopyFrom }}
	CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)
{{- end }}
{{- if .UsesBatch }}
	SendBatch(context.Context, *pgx.Batch) pgx.BatchResults
{{- end }}
}

{{ if .EmitMethodsWithDBArgument}}
func New() *{{ $.QueriesName }} {
	return &{{ $.QueriesName }}{}
{{- else -}}
func New(db DBTX) *{{ $.QueriesName }} {
	return &{{ $.QueriesName }}{db: db}
{{- end}}
}

type {{ $.QueriesName }} struct {
    {{if not .EmitMethodsWithDBArgument}}
	db DBTX
    {{end}}
}

{{if not .EmitMethodsWithDBArgument}}
func (q *{{ $.QueriesName }}) WithTx(tx pgx.Tx) *{{ $.QueriesName }} {
	return &{{ $.QueriesName }}{
		db: tx,
	}
}
{{end}}
{{end}}
